#include "Cmm.h"
#include "MpfrDerivedConstants.h"

#define MPFR_REBUILD(X, Y, Z, mpfr)                               \
  if (X >> PREC_SHIFT == 0) {                                     \
    MPFR__mpfr_sign(mpfr) = 1;                                    \
  } else {                                                        \
    MPFR__mpfr_sign(mpfr) = -1;                                   \
  }                                                               \
                                                                  \
  MPFR__mpfr_prec(mpfr) = X & ~(1 << PREC_SHIFT);                 \
  MPFR__mpfr_exp(mpfr) = Y;                                       \
  MPFR__mpfr_d(mpfr) = MPFR_MANGLE_PTR(BYTE_ARR_CTS(Z));

#define MPFR_RETURN1(mpfr)                                        \
  W_ sign_prec;                                                   \
  if (MPFR__mpfr_sign(mpfr) <= 1) {                               \
    sign_prec = MPFR__mpfr_prec(mpfr);                            \
  } else {                                                        \
    sign_prec = MPFR__mpfr_prec(mpfr) | (1 << PREC_SHIFT);        \
  }                                                               \
                                                                  \
  RET_NNP(                                                        \
    sign_prec,                                                    \
    MPFR__mpfr_exp(mpfr),                                         \
    MPFR_UNMANGLE_PTR(MPFR__mpfr_d(mpfr)) - SIZEOF_StgArrWords);

mpfr_cmm_init_si
{
  /* arguments: R1 = precision, R2 = int */
  W_ prec, i;
  W_ mpfr;

  prec = R1;
  i = R2;

  STK_CHK_GEN(SIZEOF_MPFR, NO_PTRS, mpfr_cmm_init_si);

  mpfr = Sp - SIZEOF_MPFR;

  foreign "C" mpfr_init2(mpfr, prec);
  foreign "C" mpfr_set_si(mpfr, i, 0);

  MPFR_RETURN1(mpfr);
}

mpfr_cmm_init_z
{
  /* arguments: R1 = precision, R2 = size, R3 = limbs */
  W_ prec, s, d;
  W_ mpfr, mpz;

  prec = R1;
  s = R2;
  d = R3;

  MAYBE_GC(R3_PTR, mpfr_cmm_init_z);

  STK_CHK_GEN(SIZEOF_MPFR + SIZEOF_MP_INT, R3_PTR, mpfr_cmm_init_z);

  mpfr = Sp - SIZEOF_MPFR;
  mpz  = Sp - SIZEOF_MPFR - SIZEOF_MP_INT;

  MP_INT__mp_alloc(mpz) = W_TO_INT(BYTE_ARR_WDS(d));
  MP_INT__mp_size(mpz)  = s;
  MP_INT__mp_d(mpz)     = d;

  foreign "C" mpfr_init2(mpfr, prec);
  foreign "C" mpfr_set_z(mpfr, mpz, 0);

  MPFR_RETURN1(mpfr);
}

mpfr_cmm_init_q
{
  /* arguments: R1 = rounding, R2 = precision,
                R3 = numerator size, R4 = numerator limbs
                R5 = denominator size, R6 = denominator limbs */
  W_ rnd, prec, s1, d1, s2, d2;
  W_ mpfr, mpq;

  rnd = R1;
  prec = R2;
  s1 = R3;
  d1 = R4;
  s2 = R5;
  d2 = R6;

  MAYBE_GC(R4_PTR & R6_PTR, mpfr_cmm_init_q);

  STK_CHK_GEN(SIZEOF_MPFR + SIZEOF_MP_RAT, R4_PTR & R6_PTR, mpfr_cmm_init_q);

  mpfr = Sp - SIZEOF_MPFR;
  mpq  = Sp - SIZEOF_MPFR - SIZEOF_MP_RAT;

  MP_RAT__mp_num__mp_alloc(mpq) = W_TO_INT(BYTE_ARR_WDS(d1));
  MP_RAT__mp_num__mp_size(mpq)  = s1;
  MP_RAT__mp_num__mp_d(mpq)     = BYTE_ARR_CTS(d1);
  MP_RAT__mp_den__mp_alloc(mpq) = W_TO_INT(BYTE_ARR_WDS(d2));
  MP_RAT__mp_den__mp_size(mpq)  = s2;
  MP_RAT__mp_den__mp_d(mpq)     = BYTE_ARR_CTS(d2);

  foreign "C" mpfr_init2(mpfr, prec);
  foreign "C" mpfr_set_q(mpfr, mpq, rnd);

  MPFR_RETURN1(mpfr);
}

mpfr_cmm_init_d
{
  /* arguments: R1 = rounding, R2 = precision
                D1 = double */
  W_ rnd, prec, mpfr;
  D_ dbl;

  rnd = R1;
  prec = R2;
  dbl = D1;

  STK_CHK_GEN(SIZEOF_MPFR, NO_PTRS, mpfr_cmm_init_d);

  mpfr = Sp - 1 * SIZEOF_MPFR;

  foreign "C" mpfr_init2(mpfr, prec) [];
  foreign "C" mpfr_set_d(mpfr, dbl, rnd) [];

  MPFR_RETURN1(mpfr);
}


mpfr_cmm_get_d
{
  // arguments: R1 = rounding mode, R2 = prec * sign, R3 = exp, R4 = limbs
  D_ ret;
  W_ rnd, mpfr;

  rnd = R1;

  MAYBE_GC(R4_PTR, mpfr_cmm_get_d);

  STK_CHK_GEN(SIZEOF_MPFR, R4_PTR, mpfr_cmm_get_d);

  mpfr = Sp - 1 * SIZEOF_MPFR;

  MPFR_REBUILD(R2, R3, R4, mpfr);

  (ret) = foreign "C" mpfr_get_d(mpfr, rnd);

  D1 = ret;
  jump %ENTRY_CODE(Sp(0));
}

mpfr_cmm_sgn
{ // arguments: R1 = prec * sign, R2 = exp, R3 = limbs
  W_ ret, mpfr;

  MAYBE_GC(R3_PTR, mpfr_cmm_sgn);

  STK_CHK_GEN(SIZEOF_MPFR, R3_PTR, mpfr_cmm_sgn);

  mpfr = Sp - 1 * SIZEOF_MPFR;

  MPFR_REBUILD(R1, R2, R3, mpfr);

  /* TODO check for NaN? */
  (ret) = foreign "C" mpfr_sgn(mpfr);

  R1 = ret;

  jump %ENTRY_CODE(Sp(0));
}

mpfr_cmm_cmp
{
  /* arguments: R1 = prec * sign, R2 = exp, R3 = limbs
                R4 = prec * sign, R5 = exp, R6 = limbs
   */
  W_ ret, err, op1, op2;

  MAYBE_GC(R3_PTR & R6_PTR, mpfr_cmm_cmp);

  STK_CHK_GEN(SIZEOF_MPFR*2, R3_PTR & R5_PTR, mpfr_cmm_cmp);

  op1 = Sp - 1 * SIZEOF_MPFR;
  op2 = Sp - 2 * SIZEOF_MPFR;

	MPFR_REBUILD(R1, R2, R3, op1);
	MPFR_REBUILD(R4, R5, R6, op2);

  foreign "C" mpfr_clear_erangeflag();
  (ret) = foreign "C" mpfr_cmp(op1,op2);
  if (ret == 0) {
    (err) = foreign "C" mpfr_erangeflag_p();
    if (err != 0) {
      foreign "C" mpfr_clear_erangeflag();
    }
    R1 = err;
  } else {
    R1 = ret;
  }
  jump %ENTRY_CODE(Sp(0));
}

mpfr_cmm_get_str
{
  // arguments: R1 = rounding mode, R2 = output number base, R3 = prec * sign, R4 = exp, R5 = limbs
  W_ ret;
  W_ rnd, base, mpfr;

  rnd = R1;
  base = R2;

  MAYBE_GC(R5_PTR, mpfr_cmm_get_str);

  STK_CHK_GEN(SIZEOF_MPFR + WDS(1), R5_PTR, mpfr_cmm_get_str);

  mpfr = Sp - 1 * SIZEOF_MPFR;

	MPFR_REBUILD(R3, R4, R5, mpfr)

  W_ dec;
  dec = Sp - 1 * SIZEOF_MPFR - WDS(1);

  // Free the memory...
  (ret) = foreign "C" mpfr_get_str(0, dec, base, 0, mpfr, rnd);

  RET_NP(W_[dec], ret - SIZEOF_StgArrWords);
}


#define MPFR_COMPARISON(name,cmp)                             \
name                                                          \
{                                                             \
  W_ ret, op1, op2;                                           \
  MAYBE_GC(R3_PTR & R6_PTR, name);                            \
  STK_CHK_GEN(SIZEOF_MPFR*2, R3_PTR & R5_PTR, name);          \
  op1 = Sp - 1 * SIZEOF_MPFR;                                 \
  op2 = Sp - 2 * SIZEOF_MPFR;                                 \
	MPFR_REBUILD(R1, R2, R3, op1);                              \
  MPFR_REBUILD(R4, R5, R6, op2);                              \
  (ret) = foreign "C" cmp(op1, op2);                          \
  R1 = ret;                                                   \
  jump %ENTRY_CODE(Sp(0));                                    \
}

MPFR_COMPARISON(mpfr_cmm_equal_p, mpfr_equal_p)
MPFR_COMPARISON(mpfr_cmm_greater_p, mpfr_greater_p)
MPFR_COMPARISON(mpfr_cmm_greaterequal_p, mpfr_greaterequal_p)
MPFR_COMPARISON(mpfr_cmm_less_p, mpfr_less_p)
MPFR_COMPARISON(mpfr_cmm_lessequal_p, mpfr_lessequal_p)
MPFR_COMPARISON(mpfr_cmm_lessgreater_p, mpfr_lessgreater_p)
MPFR_COMPARISON(mpfr_cmm_unordered_p, mpfr_unordered_p)

#define MPFR_TAKE2_RET1(name,mpfr_fun)                            \
name                                                              \
{                                                                 \
  W_ rnd, op1, op2, ret, prec, ps3;                               \
                                                                  \
  rnd = R1;                                                       \
  prec = R5 & ~(1 << PREC_SHIFT);                                 \
                                                                  \
  MAYBE_GC(R4_PTR & R7_PTR, name);                                \
                                                                  \
  STK_CHK_GEN(3 * SIZEOF_MPFR, R4_PTR & R7_PTR, name);            \
                                                                  \
  op1 = Sp - 1 * SIZEOF_MPFR;                                     \
  op2 = Sp - 2 * SIZEOF_MPFR;                                     \
  ret = Sp - 3 * SIZEOF_MPFR;                                     \
                                                                  \
  MPFR_REBUILD(R2, R3, R4, op1);                                  \
  MPFR_REBUILD(R5, R6, R7, op2);                                  \
                                                                  \
  foreign "C" mpfr_init2(ret, prec);                              \
  foreign "C" mpfr_fun(ret, op1, op2, rnd);                       \
                                                                  \
  MPFR_RETURN1(ret);                                              \
}

MPFR_TAKE2_RET1(mpfr_cmm_add, mpfr_add)
MPFR_TAKE2_RET1(mpfr_cmm_sub, mpfr_sub)
MPFR_TAKE2_RET1(mpfr_cmm_mul, mpfr_mul)
MPFR_TAKE2_RET1(mpfr_cmm_div, mpfr_div)
MPFR_TAKE2_RET1(mpfr_cmm_min, mpfr_min)
MPFR_TAKE2_RET1(mpfr_cmm_max, mpfr_max)
MPFR_TAKE2_RET1(mpfr_cmm_atan2, mpfr_atan2)

#define MPFR_TAKE1_RET1(name,mpfr_fun)                            \
name                                                              \
{                                                                 \
  W_ rnd, prec, op1, ret;                                         \
                                                                  \
  rnd = R1;                                                       \
  prec = R2 & ~(1 << PREC_SHIFT);                                 \
                                                                  \
  MAYBE_GC(R4_PTR, name);                                         \
                                                                  \
  STK_CHK_GEN(2 * SIZEOF_MPFR, R4_PTR, name);                     \
                                                                  \
  op1 = Sp - 1 * SIZEOF_MPFR;                                     \
  ret = Sp - 2 * SIZEOF_MPFR;                                     \
                                                                  \
  MPFR_REBUILD(R2, R3, R4, op1);                                  \
                                                                  \
  foreign "C" mpfr_init2(ret, prec);                              \
  foreign "C" mpfr_fun(ret, op1, rnd);                            \
                                                                  \
  MPFR_RETURN1(ret);                                              \
}

MPFR_TAKE1_RET1(mpfr_cmm_log,  mpfr_log)
MPFR_TAKE1_RET1(mpfr_cmm_exp,  mpfr_exp)
MPFR_TAKE1_RET1(mpfr_cmm_sqrt, mpfr_sqrt)
MPFR_TAKE1_RET1(mpfr_cmm_cos,  mpfr_cos)
MPFR_TAKE1_RET1(mpfr_cmm_sin,  mpfr_sin)
MPFR_TAKE1_RET1(mpfr_cmm_tan,  mpfr_tan)
MPFR_TAKE1_RET1(mpfr_cmm_acos, mpfr_acos)
MPFR_TAKE1_RET1(mpfr_cmm_asin, mpfr_asin)
MPFR_TAKE1_RET1(mpfr_cmm_atan, mpfr_atan)
MPFR_TAKE1_RET1(mpfr_cmm_cosh, mpfr_cosh)
MPFR_TAKE1_RET1(mpfr_cmm_sinh, mpfr_sinh)
MPFR_TAKE1_RET1(mpfr_cmm_tanh, mpfr_tanh)
MPFR_TAKE1_RET1(mpfr_cmm_acosh, mpfr_acosh)
MPFR_TAKE1_RET1(mpfr_cmm_asinh, mpfr_asinh)
MPFR_TAKE1_RET1(mpfr_cmm_atanh, mpfr_atanh)

#define MPFR_CONSTANT(name,mpfr_constant)                        \
name                                                             \
{                                                                \
  W_ rnd, prec, mpfr;                                            \
  rnd = R1;                                                      \
  prec = R2;                                                     \
  STK_CHK_GEN(SIZEOF_MPFR, NO_PTRS, name);                       \
  mpfr = Sp - 1 * SIZEOF_MPFR;                                   \
  foreign "C" mpfr_init2(mpfr, prec) [];                         \
  foreign "C" mpfr_constant(mpfr, rnd) [];                       \
                                                                 \
  MPFR_RETURN1(mpfr);                                            \
}

MPFR_CONSTANT(mpfr_cmm_const_pi, mpfr_const_pi)
MPFR_CONSTANT(mpfr_cmm_const_log2, mpfr_const_log2)
MPFR_CONSTANT(mpfr_cmm_const_euler, mpfr_const_euler)
MPFR_CONSTANT(mpfr_cmm_const_catalan, mpfr_const_catalan)
