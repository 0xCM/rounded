#include "Cmm.h"
#include "MpfrDerivedConstants.h"

import "precision" mpfr_init2;
import "precision" mpfr_set_d;
import "precision" mpfr_set_si;
import "precision" mpfr_get_d;
import "precision" mpfr_add;

mpfr_cmm_init_si
{
  /* arguments: R1 = precision, R2 = int */
  W_ prec, i;
  W_ mpfr;
  
  prec = R1;
  i = R2;

  STK_CHK_GEN(SIZEOF_MPFR, NO_PTRS, mpfr_cmm_init_si);

  mpfr = Sp - 1 * SIZEOF_MPFR;

  foreign "C" mpfr_init2(mpfr, prec);
  foreign "C" mpfr_set_si(mpfr, i, 0);

  RET_NNP(
    MPFR__mpfr_sign(mpfr) * MPFR__mpfr_prec(mpfr), // N.B: this order of the multiplication is important
    MPFR__mpfr_exp(mpfr),
    MPFR_UNMANGLE_PTR(MPFR__mpfr_d(mpfr)) - SIZEOF_StgArrWords);
}

mpfr_cmm_init_d
{
  /* arguments: R1 = rounding, R2 = precision
                D1 = double */
  W_ rnd, prec, mpfr;
  D_ dbl;

  rnd = R1;
  prec = R2;
  dbl = D1;

  STK_CHK_GEN(SIZEOF_MPFR, NO_PTRS, mpfr_cmm_init_d);

  mpfr = Sp - 1 * SIZEOF_MPFR;

  foreign "C" mpfr_init2(mpfr, prec) [];
  foreign "C" mpfr_set_d(mpfr, dbl, rnd) [];

  RET_NNP(
    MPFR__mpfr_sign(mpfr) * MPFR__mpfr_prec(mpfr),
    MPFR__mpfr_exp(mpfr),
    MPFR_UNMANGLE_PTR(MPFR__mpfr_d(mpfr)) - SIZEOF_StgArrWords);
}

mpfr_cmm_get_d
{
  // arguments: R1 = rounding mode, R2 = prec * sign, R3 = exp, R4 = limbs 
  D_ ret;
  W_ rnd, mpfr;
  W_ sv;
  
  rnd = R1;

  MAYBE_GC(R4_PTR, mpfr_cmm_get_d);
  
  STK_CHK_GEN(SIZEOF_MPFR, R4_PTR, mpfr_cmm_get_d);

  sv = R2 >> PREC_SHIFT;
  
  mpfr = Sp - 1 * SIZEOF_MPFR;
  
  MPFR__mpfr_prec(mpfr) = (R2 + sv) ^ sv;
  MPFR__mpfr_sign(mpfr) = 1 | sv;
  MPFR__mpfr_exp(mpfr) = R3;
  MPFR__mpfr_d(mpfr) = MPFR_MANGLE_PTR(BYTE_ARR_CTS(R4));

  (ret) = foreign "C" mpfr_get_d(mpfr, rnd);

  D1 = ret;
  jump %ENTRY_CODE(Sp(0));
}

mpfr_cmm_add
{
  // arguments: R1 = rounding mode R2 = prec1 * sign1, R3 = exp1, R4 = limbs1 R5 = prec2 * sign2, R6 = exp2, R7 = limbs2
  W_ rnd, op1, op2, ret, s1, s2, prec, ps3;

  rnd = R1;
  prec = (R5 + s2) ^ s2;

  MAYBE_GC(R4_PTR & R7_PTR, mpfr_cmm_add);

  STK_CHK_GEN(3 * SIZEOF_MPFR, R4_PTR & R7_PTR, mpfr_cmm_add);

  s1 = R2 >> PREC_SHIFT;
  s2 = R5 >> PREC_SHIFT;

  op1 = Sp - 1 * SIZEOF_MPFR;
  op2 = Sp - 2 * SIZEOF_MPFR;
  ret = Sp - 3 * SIZEOF_MPFR;
  
  MPFR__mpfr_prec(op1) = (R2 + s1) ^ s1;
  MPFR__mpfr_sign(op1) = 1 | s1;
  MPFR__mpfr_exp(op1) = R3;
  MPFR__mpfr_d(op1) = MPFR_MANGLE_PTR(BYTE_ARR_CTS(R4));
  
  MPFR__mpfr_prec(op2) = prec;
  MPFR__mpfr_sign(op2) = 1 | s2;
  MPFR__mpfr_exp(op2) = R6;
  MPFR__mpfr_d(op2) = MPFR_MANGLE_PTR(BYTE_ARR_CTS(R7));
  
  foreign "C" mpfr_init(ret, prec);
  foreign "C" mpfr_add(ret, op1, op2, rnd);

  RET_NNP(
    MPFR__mpfr_sign(ret) * MPFR__mpfr_prec(ret),
    MPFR__mpfr_exp(ret),
    MPFR_UNMANGLE_PTR(MPFR__mpfr_d(ret)) - SIZEOF_StgArrWords);
}
